<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <style>

    body {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      width: 960px;
      height: 500px;
      position: relative;
      margin: auto;
    }

    h1, h4 {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      text-align: center;
    }

    .toolTip {
      position: absolute;
      display: none;
      min-width: 80px;
      height: auto;
      background: none repeat scroll 0 0 #ffffff;
      border: 1px solid #A4A4A4;
      padding: 14px;
      text-align: center;
      border-radius: 8px 8px 8px 8px;
      box-shadow: -3px 3px 15px #888888;
    }

    .legend {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 60%;
    }

    rect {
      stroke-width: 2;
    }

    .axisVertical path{
      fill: none;
      stroke: #000;
    }

    .axisVertical line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .axisVertical .tick line {
      stroke-width: 1;
      stroke: rgba(0, 0, 0, 0.2);
    }

    .axisHorizontal path{
      fill: none;
    }

    .axisHorizontal line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .axisHorizontal .tick line {
      stroke-width: 1;
      stroke: rgba(0, 0, 0, 0.2);
    }

    .grid line {
      stroke: lightgrey;
      stroke-opacity: 0.3;
      shape-rendering: crispEdges;
    }

    .grid path {
      stroke-width: 0;
    }

  </style>
</head>

<body>

<% include templates/header.ejs %>

<!-- Page Content -->
<div class="container">
    <div class="row">
        <div class="starter-template">

              <h1><%= repo %></h1>
            
              <h1>Comparison between number of additions and deletions between authors</h1>

              <form>
                <label><input type="radio" name="mode" value="grouped"> Grouped</label>
                <label><input type="radio" name="mode" value="stacked" checked> Stacked</label>
              </form>
              <svg width="960" height="500"></svg>
              <script src="https://d3js.org/d3.v4.min.js"></script>
              <script>

                var svg = d3.select("svg"),
                margin = {top: 20, right: 20, bottom: 30, left: 40},
                width = +svg.attr("width") - margin.left - margin.right,
                height = +svg.attr("height") - margin.top - margin.bottom,
                g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              // for stacked bar chart
              var x = d3.scaleBand()
              .rangeRound([0, width])
              .padding(0.2)
              .paddingInner(0.05)
              .align(0.1);

              var y = d3.scaleLinear()
              .rangeRound([height, 0]);

              var z = d3.scaleOrdinal()
              .range(["#01DFA5", "#FF8000"]);

              // for group bar chart
              var x0 = d3.scaleBand()
              .rangeRound([0  , width])
              .paddingInner(0.1);

              var x1 = d3.scaleBand()
              .padding(0.05);

              // gridlines in y axis function
              function make_y_gridlines() {   
                return d3.axisLeft(y)
                .ticks(15)
              }

              var tooltip = d3.select("body").append("div").attr("class", "toolTip");

              d3.csv("/data/overview.csv", function(d, i, columns) {
                for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];
                  d.total = t;
                return d;
              }, function(error, data) {
                if (error) throw error;

                var dataGroupBarChart = data;

                var keys = data.columns.slice(1);

                transitionStacked();

                d3.selectAll("input")
                .on("change", changed);

                var timeout = d3.timeout(function() {
                  d3.select("input[value=\"stacked\"]")
                  .property("checked", true)
                  .dispatch("change");
                });

                function changed() {
                  console.log("Changing transition");
                  timeout.stop();
                  if (this.value === "stacked") transitionStacked();
                  else transitionGrouped();
                }

                function transitionGrouped() {

                  d3.selectAll("svg > g > *").remove();

                  x0.domain(dataGroupBarChart.map(function(d) { return d.author; }));
                  x1.domain(keys).rangeRound([0, x0.bandwidth()]);
                  y.domain([0, d3.max(dataGroupBarChart, function(d) { return d3.max(keys, function(key) { return d[key]; }) }) + 100]).nice();

                  var bar = g.append("g")
                  .selectAll("g")
                  .data(dataGroupBarChart)
                  .enter().append("g")
                  .attr("transform", function(d) { return "translate(" + x0(d.author) + ",0)"; })
                  
                  var rect = bar.selectAll("rect")
                  .data(function(d) { return keys.map(function(key) { return {key: key, value: d[key]}; }); })
                  .enter().append("rect")
                  .attr("y", height)
                  .attr("width", x.bandwidth())
                  .attr("height", 0);

                  rect.transition()
                  .delay(function(d, i) { return i * 10; })
                  .attr("x", function(d) { return x1(d.key); })
                  .attr("y", function(d) { return y(d.value); })
                  .attr("width", x1.bandwidth())
                  .attr("height", function(d) { return height - y(d.value); })
                  .attr("fill", function(d) { return z(d.key); })

                  rect.on("mousemove", function(d){

                   tooltip
                   .style("left", d3.event.pageX - 280+ "px")
                   .style("top", d3.event.pageY - 80 + "px")
                   .style("display", "inline-block")
                   .html("Number of " + d.key + " = " + d.value);
                 })
                  .on("mouseout", function(d){ tooltip.style("display", "none");});

                  g.append("g")
                  .attr("class", "axisHorizontal")
                  .attr("transform", "translate(0," + height + ")")
                  .call(d3.axisBottom(x0))
                  .append("text")
                  .attr("x", width / 2)
                  .attr("y", 20)
                  .attr("dy", ".71em")
                  .attr("fill", "#000")
                  .attr("font-weight", "bold")
                  .attr("text-anchor", "middle")
                  .text("Months in 2016");

                  g.append("g")
                  .attr("class", "axisVertical")
                  .call(d3.axisLeft(y).ticks(null, "s"))
                  .append("text")
                  .attr("x", 2)
                  .attr("y", y(y.ticks().pop()) + 0.5)
                  .attr("dy", "0.32em")
                  .attr("fill", "#000")
                  .attr("font-weight", "bold")
                  .attr("text-anchor", "start")
                  .text("Count");

                  g.append("g")     
                  .attr("class", "grid")
                  .call(make_y_gridlines()
                    .tickSize(-width)
                    .tickFormat("")
                    );

                  var legend = g.append("g")
                  .attr("font-family", "sans-serif")
                  .attr("font-size", 10)
                  .attr("text-anchor", "end")
                  .selectAll("g")
                  .data(keys.slice())
                  .enter().append("g")
                  .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

                  legend.append("rect")
                  .attr("x", width - 19)
                  .attr("width", 19)
                  .attr("height", 19)
                  .attr("fill", z);

                  legend.append("text")
                  .attr("x", width - 24)
                  .attr("y", 9.5)
                  .attr("dy", "0.32em")
                  .text(function(d) { return d; });
                }

                function transitionStacked() {

                  d3.selectAll("svg > g > *").remove();

                  x.domain(data.map(function(d) { return d.author; }));
                  z.domain(keys);
                  y.domain([0, d3.max(data, function(d) { return d.total; })]).nice();

                  var bar = g.append("g")
                  .selectAll("g")
                  .data(d3.stack().keys(keys)(data))
                  .enter().append("g")
                  .attr("fill", function(d) { return z(d.key); });

                  var rect = bar.selectAll("rect")
                  .data(function(d) { return d; })
                  .enter().append("rect")
                  .attr("x", function(d) { return x(d.data.author); })
                  .attr("y", height)
                  .attr("width", x.bandwidth())
                  .attr("height", 0);

                  rect.transition()
                  .delay(function(d, i) { return i * 10; })
                  .attr("y", function(d) { return y(d[1]); })
                  .attr("height", function(d) { return y(d[0]) - y(d[1]); });

                  rect.on("mousemove", function(d){

                   tooltip
                   .style("left", d3.event.pageX - 280+ "px")
                   .style("top", d3.event.pageY - 80 + "px")
                   .style("display", "inline-block")
                   .html("Total count for " + d.data.author + " = " + d.data.total); 
                 })
                  .on("mouseout", function(d){ tooltip.style("display", "none");});

                  g.append("g")
                  .attr("class", "axisHorizontal")
                  .attr("transform", "translate(0," + height + ")")
                  .call(d3.axisBottom(x))
                  .append("text")
                  .attr("x", width / 2)
                  .attr("y", 20)
                  .attr("dy", ".71em")
                  .attr("fill", "#000")
                  .attr("font-weight", "bold")
                  .attr("text-anchor", "middle")
                  .text("Months in 2016");

                  g.append("g")
                  .attr("class", "axisVetical")
                  .call(d3.axisLeft(y).ticks(null, "s"))
                  .append("text")
                  .attr("x", 2)
                  .attr("y", y(y.ticks().pop()) + 0.5)
                  .attr("dy", "0.32em")
                  .attr("fill", "#000")
                  .attr("font-weight", "bold")
                  .attr("text-anchor", "start")
                  .text("Count");

                  g.append("g")     
                  .attr("class", "grid")
                  .call(make_y_gridlines()
                    .tickSize(-width)
                    .tickFormat("")
                    );

                  var legend = g.append("g")
                  .attr("font-family", "sans-serif")
                  .attr("font-size", 10)
                  .attr("text-anchor", "end")
                  .selectAll("g")
                  .data(keys.slice().reverse())
                  .enter().append("g")
                  .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

                  legend.append("rect")
                  .attr("x", width - 19)
                  .attr("width", 19)
                  .attr("height", 19)
                  .attr("fill", z);

                  legend.append("text")
                  .attr("x", width - 24)
                  .attr("y", 9.5)
                  .attr("dy", "0.32em")
                  .text(function(d) { return d; });
                }
              });

            </script>
        </div>
    </div>
</div>
</body>
</html>